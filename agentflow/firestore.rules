rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read/write their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Projects - users can only access projects they own or are invited to
    match /projects/{projectId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.ownerId || 
         request.auth.uid in resource.data.get('collaborators', []));
      
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.ownerId;

      // Agents within projects
      match /agents/{agentId} {
        allow read, write: if request.auth != null &&
          get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId == request.auth.uid;
      }

      // Features within projects
      match /features/{featureId} {
        allow read, write: if request.auth != null &&
          get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId == request.auth.uid;

        // Tasks within features
        match /tasks/{taskId} {
          allow read, write: if request.auth != null &&
            get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId == request.auth.uid;
        }
      }
    }

    // Token usage - read/write for project owners only
    match /tokenUsage/{usageId} {
      allow read, write: if request.auth != null;
      // TODO: Add more specific rules based on project ownership
    }

    // Agent checkpoints - read/write for project owners only
    match /checkpoints/{checkpointId} {
      allow read, write: if request.auth != null;
      // TODO: Add more specific rules based on project ownership
    }

    // Deny all other reads/writes
    match /{document=**} {
      allow read, write: if false;
    }
  }
}